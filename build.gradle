plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

configurations {
    jarDependency
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // YamlBeans
    implementation "com.esotericsoftware.yamlbeans:yamlbeans:${project.yaml_beans_version}"
    jarDependency "com.esotericsoftware.yamlbeans:yamlbeans:${project.yaml_beans_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": inputs.properties.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    inputs.property "archivesName", project.base.archivesName

    from("LICENSE") {
        rename { "${it}_${inputs.properties.archivesName}" }
    }

    from {
        configurations.jarDependency.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

tasks.register('generateBuildConfig') {
    def configVersion = project.findProperty('config_version') ?: "1.0"
    def configPath = project.findProperty('config_path') ?: "light-level-2025.yaml"

    inputs.property("config_version", configVersion)
    inputs.property("config_path", configPath)

    def outputDir = layout.buildDirectory.dir("generated/sources/buildConfig/com/dark_lion_jp/light_level_2025")

    outputs.dir(outputDir)

    doLast {
        def file = outputDir.get().file("BuildConfig.java").asFile
        file.parentFile.mkdirs()
        file.text = """
            package com.dark_lion_jp.light_level_2025;

            public class BuildConfig {
                public static final int CONFIG_VERSION = ${configVersion};
                public static final String CONFIG_PATH = "${configPath}";
            }
        """.stripIndent()
    }
}
sourceSets {
    main {
        java {
            srcDir layout.buildDirectory.dir("generated/sources/buildConfig")
        }
    }
}

tasks.named("compileJava") {
    dependsOn(tasks.named("generateBuildConfig"))
}
tasks.named("sourcesJar") {
    dependsOn(tasks.named("generateBuildConfig"))
}